// class Solution {
//     boolean BFS(ArrayList<ArrayList<Integer>> adj, int s, boolean vis[], int parent[]){
//         Queue<Node> q=new LinkedList<>();
//         q.add(new Node(s,-1));
//         vis[s]=true;
        
//         while(!q.isEmpty()){
//             int node = q.peek().first;
//             int par = q.peek().second;
//             q.remove();
            
//             for(Integer it:adj.get(node)){
//                 if(vis[it]==false){
//                     q.add(new Node(it,node));
//                     vis[it]=true;
//                 }else if(par!=it) return true;
//             }
//         }
//         return false;
//     }
//     // Function to detect cycle in an undirected graph.
//     public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
//         boolean vis[]=new boolean[V];
//         Arrays.fill(vis,false);
//         int parent[] = new int[V];
//         Arrays.fill(parent,-1);
        
//         for(int i=0;i<V;i++)
//         if(vis[i]==false)
//         if(BFS(adj,i,vis,parent))
//         return true;
        
        
//         return false;
//     }
// }


class Solution {
    private boolean dfs(int node,int parent,int vis[] , ArrayList<ArrayList<Integer>> adj){
        vis[node]=1;
        for(int it:adj.get(node)){
            if(vis[it]==0){
                if(dfs(it,node,vis,adj)==true)
                return true;
            }else if(parent != it) return true;
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        int vis[]= new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                if(dfs(i,-1,vis,adj)==true) return true;
            }
        }
        return false;
    }
}
