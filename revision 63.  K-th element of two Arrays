// class Solution {
//     public long kthElement( int arr1[], int arr2[], int n, int m, int k) {
//         int n1=arr1.length;
//         int n2=arr2.length;
//         int i=0,j=0,w=0;
//         int arr3[]= new int[n1+n2];
//         while(i<n1 && j<n2){
//             if(arr1[i]<arr2[j]){
//                 arr3[w++]=arr1[i++];
//             }else{
//                 arr3[w++]=arr2[j++];
//             }
//         }
//         while(i<n1){
//             arr3[w++]=arr1[i++];
//         }
//         while(j<n2){
//             arr3[w++]=arr2[j++];
//         }
//         return arr3[k-1];
//     }
// }


class Solution {
    public long kthElement(int arr1[], int arr2[], int n, int m, int k) {
        if (m > n) {
            return kthElement(arr2, arr1, m, n, k);
        }
        
        int low = Math.max(0, k - m), high = Math.min(k, n);
        int l1 = Integer.MIN_VALUE, l2 = Integer.MIN_VALUE;
        int r1 = Integer.MAX_VALUE, r2 = Integer.MAX_VALUE;
        
        while (low <= high) {
            int cnt1 = (low + high) / 2;
            int cnt2 = k - cnt1;
            
            if (cnt1 == 0) l1 = Integer.MIN_VALUE;
            else l1 = arr1[cnt1 - 1];
            
            if (cnt2 == 0) l2 = Integer.MIN_VALUE;
            else l2 = arr2[cnt2 - 1];
            
            if (cnt1 == n) r1 = Integer.MAX_VALUE;
            else r1 = arr1[cnt1];
            
            if (cnt2 == m) r2 = Integer.MAX_VALUE;
            else r2 = arr2[cnt2];
            
            if (l1 <= r2 && l2 <= r1) {
                return Math.max(l1, l2);
            } else if (l1 > r2) {
                high = cnt1 - 1;
            } else {
                low = cnt1 + 1;
            }
        }
        return -1;
    }
}
