// class Solution {
//     public int reversePairs(int[] nums) {
//         int n = nums.length;
//         int cnt=0;
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                 if((i<j)&&(j<n)){
//                     if(nums[i]>2*nums[j]){
//                         cnt++;
//                     }
//                 }
//             }
//         }
//         return cnt;
//     }
// }

class Solution {
    private void merge(int nums[],int low, int mid, int high){
        ArrayList<Integer> temp = new ArrayList<>();
        int left = low;
        int right = mid+1;
        while(left<=mid && right<=high){
            if(nums[left]<nums[right]){
                temp.add(nums[left]);
                left++;
            }else{
                temp.add(nums[right]);
                right++;
            }
        }
        while(left<=mid){
            temp.add(nums[left]);
            left++;
        }
        while(right<=high){
            temp.add(nums[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            nums[i] = temp.get(i-low);
        }
    }
    int countPair(int nums[],int low,int mid, int high){
        int cnt=0;
        int right = mid+1;
        for(int i=low;i<=mid;i++){
            while(right<=high && nums[i]>2*nums[right]) right++;
            cnt += (right -(mid+1));
        }
        return cnt;
    }
    int ms(int nums[],int low, int high){
        int cnt=0;
        if(low>=high) return cnt;
        int mid = (low+high)/2;
        cnt+=ms(nums,low,mid);
        cnt+=ms(nums,mid+1,high);
        cnt+=countPair(nums,low,mid,high);
        merge(nums,low,mid,high);
        return cnt;
    }
    public int reversePairs(int[] nums) {
        int n=nums.length;
        return ms(nums,0,n-1);
    }
}
