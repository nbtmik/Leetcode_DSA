// class Solution {
//     public List<Integer> majorityElement(int[] nums) {
//         int n = nums.length;
//         List<Integer> ls = new ArrayList<>();
//         for(int i=0;i<n;i++){
//             if(ls.size()==0 || ls.get(0) != nums[i]){
//                 int cnt=0;
//             for(int j=0;j<n;j++){
//                 if(nums[j]==nums[i]) cnt++;
//             }
//             if(cnt>(n/3)){
//                 ls.add(nums[i]);
//             }
//         }
//         if(ls.size()==2) break;
//         }
//         return ls;
//     }
// }

// class Solution {
//     public List<Integer> majorityElement(int[] nums) {
//         int n = nums.length;
//         int min = (int)(n/3)+1;
//         List<Integer> ls = new ArrayList<>();
//         HashMap<Integer,Integer> mp = new HashMap<>();
//         for(int i=0;i<n;i++){
//             int value = mp.getOrDefault(nums[i],0);
//             mp.put(nums[i],value+1);
//             if(mp.get(nums[i])==min){
//                 ls.add(nums[i]);
//             }
//             if(ls.size()==2) break;
//         }
//         return ls;
//     }
// }

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n = nums.length;
        int cnt1=0,cnt2=0;
        int el1=Integer.MIN_VALUE;
        int el2=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            if(cnt1==0 && el2 != nums[i]){
                el1=nums[i];
                cnt1=1;
            } else if(cnt2==0 && el1 != nums[i]){
                el2= nums[i];
                cnt2=1;
            }else if (nums[i]==el1) cnt1++;
            else if(nums[i]==el2) cnt2++;
            else{
                cnt1--;cnt2--;
            }
        }
        List<Integer> ls = new ArrayList<>();
        cnt1=0; cnt2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==el1) cnt1++;
            if(nums[i]==el2) cnt2++;
        }
        int mini = (int)(n/3)+1;
        if(cnt1>=mini) ls.add(el1);
        if(cnt2>=mini) ls.add(el2);
        return ls;
    }
}
