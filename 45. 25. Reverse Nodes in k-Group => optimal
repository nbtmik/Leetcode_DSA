class Solution {
    ListNode reverseList(ListNode head){
        ListNode temp = head;
        ListNode prev = null;
        while(temp != null){
            ListNode front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }return prev;
    }
    ListNode getKnode(ListNode temp, int k){
        k -= 1;
        while(temp != null && k>0){
            k--;
            temp = temp.next; 
        }return temp;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        ListNode prev = null;
        while(temp != null){
            ListNode kthnode = getKnode(temp, k);
            if(kthnode==null){
                if(prev !=null){
                    prev.next = temp;
                }
                break;
            }
            ListNode nextnode = kthnode.next;
            kthnode.next = null;
            reverseList(temp);
            if(temp == head){
                head = kthnode;
            }else{
                prev.next = kthnode;
            }
            prev = temp;
            temp = nextnode;
        } return head;
    }
}
