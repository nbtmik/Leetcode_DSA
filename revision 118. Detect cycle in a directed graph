// class Solution {
//     private boolean dfs(int node,ArrayList<ArrayList<Integer>> adj, int vis[], int dfsvis[]){
//         vis[node]=1;
//         dfsvis[node]=1;
//         for(int it:adj.get(node)){
//             if(vis[it]==0){
//                 if(dfs(it,adj,vis,dfsvis)==true){
//                     return true;
//                     }
//                 }else if(dfsvis[it]==1){
//                     return true;
//                 }
//             }
//             dfsvis[node]=0;
//             return false;
//         }
//     // Function to detect cycle in a directed graph.
//     public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
//         int vis[] = new int[V];
//         int dfsvis[] = new int[V];
//         for(int i=0;i<V;i++){
//             if(vis[i]==0){
//                 if(dfs(i,adj,vis,dfsvis)==true) return true;
//             }
//         }
//         return false;
//     }
// }

class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        int degree[] = new int[V];
        for(int i=0;i<V;i++){
            for(int it:adj.get(i)){
                degree[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i=0;i<V;i++){
            if(degree[i]==0){
                q.add(i);
            }
        }
        int cnt=0;
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            cnt++;
            for(int it:adj.get(node)){
                degree[it]--;
                if(degree[it]==0) q.add(it);
            }
        }
        if(cnt==V) return false;
        return true;
    }
}
