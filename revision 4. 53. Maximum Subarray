// class Solution {
//     public int maxSubArray(int[] nums) {
//         int n = nums.length;
//         int maxSum =nums[0];
//         int curNum = nums[0];
//         for(int i=1;i<n;i++){
//             curNum = Math.max(nums[i],curNum + nums[i]);
//             maxSum = Math.max(maxSum,curNum);
//         }
//         return maxSum;
//     }
// }

// class Solution {
//     public int maxSubArray(int[] nums) {
//         int n = nums.length;
//         int max = Integer.MIN_VALUE;
//         for(int i=0;i<n;i++){
//             for(int j=i;j<n;j++){
//                 int sum=0;
//                 for(int k=i;k<=j;k++){
//                     sum +=nums[k];
//                 }
//                 max = Math.max(max,sum);
//             }
//         }
//         return max;
//     }
// }

// class Solution {
//     public int maxSubArray(int[] nums) {
//         int n = nums.length;
//         int maxi = Integer.MIN_VALUE;
//         for(int i=0;i<n;i++){
//             int sum =0;
//             for(int j=i;j<n;j++){
//                 sum +=nums[j];
//             maxi= Math.max(maxi,sum);
//             }
//         }
//         return maxi;
//     }
// }

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int maxi = Integer.MIN_VALUE;
        int sum =0;
        for(int i=0;i<n;i++){
            sum +=nums[i];
            if(sum>maxi){
                maxi=sum;
            }
            if(sum<0){
                sum=0;
            }
        }
        return maxi;
    }
}
