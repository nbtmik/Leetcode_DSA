// public class Solution {
//     public static int subarraysWithSumK(int []a, int b) {
//         int n=a.length;
//         int cnt=0;
//         for(int i=0;i<n;i++){
//             for(int j=i;j<n;j++){
//                 int xor=0;
//                 for(int k=i;k<=j;k++){
//                     xor=xor^a[k];
//                 }
//                 if(xor==b){
//                     cnt++;
//                 }
//             }
//         }
//         return cnt;
//     }
// }


// public class Solution {
//     public static int subarraysWithSumK(int []a, int b) {
//         int n=a.length;
//         int cnt=0;
//         for(int i=0;i<n;i++){
//             int xor=0;
//             for(int j=i;j<n;j++){
//                 xor = xor ^ a[j];
//                 if(xor==b) cnt++;
//             }
//         }
//         return cnt;
//     }
// }


public class Solution {
    public static int subarraysWithSumK(int []a, int b) {
        int n=a.length;
        int xr=0;
        Map<Integer,Integer> mp = new HashMap<>();
        mp.put(xr,1);
        int cnt=0;
        for(int i=0;i<n;i++){
            xr=xr^a[i];
            int x=xr^b;
            if(mp.containsKey(x)){
                cnt+=mp.get(x);
            }
            if(mp.containsKey(xr)){
                mp.put(xr, mp.get(xr)+1);
            }else{
                mp.put(xr, 1);
            }
        }
        return cnt;
    }
}
