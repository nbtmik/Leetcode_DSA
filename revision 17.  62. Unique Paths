// class Solution {
//         public int uniquePaths(int m, int n) {
//             return TotaluniquePaths(m,n,0,0);
//     }

//     public int TotaluniquePaths(int m, int n,int i,int j) {
//         if(i==(n-1) && j==(m-1)) return 1;
//         if(i>=n || j>=m) return 0;
//         else return TotaluniquePaths(m,n,i+1,j) + TotaluniquePaths(m,n,i,j+1);
//     }
// }

// class Solution {
//         public int uniquePaths(int m, int n) {
//             int dp[][] = new int[m][n];
//             return TotaluniquePaths(m,n,0,0,dp);
//     }

//     public int TotaluniquePaths(int m, int n,int i,int j,int dp[][]) {
//         if(i==m-1 || j==n-1) return 1;
//         if(i>=m || j>=n) return 0;
//         if(dp[i][j]!=0) return dp[i][j];
//         return dp[i][j] = TotaluniquePaths(m,n,i+1,j,dp) + TotaluniquePaths(m,n,i,j+1,dp);
//     }
// }

class Solution {
        public int uniquePaths(int m, int n) {
          int N= m+n-2;
          int r= m-1;
          double res=1;
          for(int i=1;i<=r;i++){
            res= res*(N-r+i)/i;
          }
          return (int)res;  
    }
}
