class Solution {
    private boolean checkCycle(int node,ArrayList<ArrayList<Integer>> adj,int vis[],int dfsvis[]){
        vis[node] = 1;
        dfsvis[node] =1;
        for(int it:adj.get(node)){
            if(vis[it]==0){
                if(checkCycle(it,adj,vis,dfsvis)==true){
                    return true;
                }
            }
            else if(dfsvis[it]==1){
                return true;
            }
        }
        dfsvis[node]=0;
        return false;
    }
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        int vis[] = new int[V];
        int dfsvis[] = new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]==0){
            if(checkCycle(i,adj,vis,dfsvis)==true)return true;
        }
    }
    return false;
}
}
