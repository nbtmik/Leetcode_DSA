// class Solution {
//     public List<List<Integer>> fourSum(int[] nums, int target) {
//         int n = nums.length;
//         Set<List<Integer>> st = new HashSet<>();
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                 for(int k=j+1;k<n;k++){
//                     for(int m=k+1;m<n;m++){
//                         long sum = (long)nums[i] +(long)nums[j];
//                         sum += nums[k];
//                         sum += nums[m];
//                         if(sum==target){
//                             List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k],nums[m]);
//                             temp.sort(null);
//                             st.add(temp);
//                         }
//                     }
//                 }
//             }
//         }
//         List<List<Integer>> ans = new ArrayList<>(st);
//         return ans;
//     }
// }

// class Solution {
//     public List<List<Integer>> fourSum(int[] nums, int target) {
//         int n = nums.length;
//         Set<List<Integer>> st = new HashSet<>();
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                 Set<Integer> hashset = new HashSet<>();
//                 for(int k=j+1;k<n;k++){
//                     int forth= target -(nums[i]+nums[j]+nums[k]);
//                     if(hashset.contains(forth)){
//                     List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k],forth);
//                     temp.sort(null);
//                     st.add(temp);
//                     }
//                     hashset.add(nums[k]);
//                 }
//             }
//         }
//         List<List<Integer>> ans = new ArrayList<>(st);
//         return ans;
//     }
// }

// class Solution {
//     public List<List<Integer>> fourSum(int[] nums, int target) {
//         int n = nums.length;
//         Arrays.sort(nums);
//         Set<List<Integer>> ans = new HashSet<>();
//         for(int i=0;i<n;i++){
//             if(i>0 && nums[i]==nums[i-1]) continue;
//             for(int j=i+1;j<n;j++){
//                 if(j !=(i+1) && nums[j]==nums[j-1]) continue;
//                 int k = j+1;
//                 int l= n-1;
//                 while(k<l){
//                     long sum = nums[i] + nums[j] + nums[k] + nums[l];
//                     if(sum==target){
//                         List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k],nums[l]);
//                         ans.add(temp);
//                         while(k<l && nums[k]==nums[k+1]) k++;
//                         while(k<l && nums[l]==nums[l-1]) l--;
//                         k++;
//                         l--;
//                     }
//                     else if(sum < target){
//                         k++;
//                     } else{
//                         l--;
//                     }
//                 }
//             }
//         }
//         return new ArrayList<>(ans);
//     }
// }


class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Arrays.sort(nums);
        Set<List<Integer>> ans = new HashSet<>(); 
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < n; j++) {
                if (j != (i + 1) && nums[j] == nums[j - 1]) continue;
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    // long sum = nums[i] + nums[j] + nums[k] + nums[l]; 
                    long sum = 0L; // Initialize sum to 0
                    sum += nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if (sum == target) {
                        List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);
                        ans.add(temp);
                        while (k < l && nums[k] == nums[k + 1]) k++;
                        while (k < l && nums[l] == nums[l - 1]) l--;
                        k++;
                        l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        return new ArrayList<>(ans); 
    }
}
