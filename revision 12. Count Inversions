// import java.util.* ;
// import java.io.*; 
// public class Solution {
//     public static long getInversions(long arr[], int n) {
//         int cnt=0;
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                 if(arr[i]>arr[j]){
//                     if(i<j){
//                         cnt++;
//                     }
//                 }
//             }
//         }
//         return cnt;
//     }
// }

import java.util.* ;
import java.io.*; 
public class Solution {
    private static int merge(long arr[] , int low, int mid , int high){
        ArrayList<Long> temp = new ArrayList<>();
        int left = low;
        int right = mid+1;
        int cnt=0;
        while(left <=mid && right <=high){
            if(arr[left]<=arr[right]){
                temp.add(arr[left]);
                left++;
            }else{
                temp.add(arr[right]);
                cnt+=(mid-left+1);
                right++;
            }
        }
        while(left<=mid){
            temp.add(arr[left]);
            left++;
        }
        while(right<=high){
            temp.add(arr[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            arr[i] = temp.get(i-low);
        }
        return cnt;
    }

    public static int ms(long arr[],int low, int high){
        int cnt =0;
        if(low>=high) return cnt;
        int mid=(low+high)/2;
        cnt +=ms(arr,low,mid);
        cnt +=ms(arr,mid+1,high);
        cnt +=merge(arr,low,mid,high);
        return cnt;
    }

    public static long getInversions(long arr[], int n) {
        return ms(arr,0,n-1);
    }
}
