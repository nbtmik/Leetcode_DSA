class DisjointSet{
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    List<Integer> rank = new ArrayList<>();
    public DisjointSet(int n){
        for(int i=0;i<=n;i++){
            parent.add(i);
            size.add(1);
            rank.add(0);
        }
    }
    public int findUPar(int node){
        if(node==parent.get(node)){
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node,ulp);
        return parent.get(node);
    }
    public void unionBysize(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(size.get(ulp_u)<size.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
            size.set(ulp_u,size.get(ulp_v)+size.get(ulp_u));
        }else{
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u,size.get(ulp_v)+size.get(ulp_u));
        }
    }
    public void unionByrank(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u== ulp_v) return;
        if(rank.get(ulp_u)<rank.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
        } else if(rank.get(ulp_v)<rank.get(ulp_u)){
            parent.set(ulp_v,ulp_u);
        } else{
            parent.set(ulp_v,ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u,rankU+1);
        }
    }
}

class Edge implements Comparable<Edge>{
    int src, dest, weight ;
    Edge(int _src ,int _dest ,int _wt){
        this.src =  _src;
        this.dest = _dest;
        this.weight = _wt;
    }
    public int compareTo(Edge compareEdge){
        return this.weight - compareEdge.weight;
    }
};

class Solution{
	static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj){
	    List<Edge> edges = new ArrayList<Edge>();
	    for(int i=0;i<V;i++){
	        for(int j=0;j<adj.get(i).size();j++){
	            int adjNode = adj.get(i).get(j).get(0);
	            int wt = adj.get(i).get(j).get(1);
	            int node = i;
	            Edge temp = new Edge(i,adjNode,wt);
	            edges.add(temp);
	        }
	    }
	    DisjointSet ds = new DisjointSet(V);
	    Collections.sort(edges);
	    int mstwt=0;
	    for(int i=0;i<edges.size();i++){
	        int wt = edges.get(i).weight;
	        int u= edges.get(i).src;
	        int v = edges.get(i).dest;
	        if(ds.findUPar(u) != ds.findUPar(v)){
	            mstwt +=wt;
	            ds.unionBysize(u,v);
	        }
	    }
	    return mstwt;
	    
	}
}
