// class Solution {
//     public double findMedianSortedArrays(int[] nums1, int[] nums2) {
//         int n1=nums1.length;
//         int n2=nums2.length;
//         int arr3[]= new int[n1+n2];
//         int i=0,j=0,k=0;
//         while(i<n1 && j<n2){
//             if(nums1[i]<nums2[j]){
//                 arr3[k++]=nums1[i++];
//             }else{
//                 arr3[k++]=nums2[j++];
//             }
//         }
//         while(i<n1){
//             arr3[k++]=nums1[i++];
//         }
//         while(j<n2){
//             arr3[k++]=nums2[j++];
//         }
//         int n=n1+n2;
//         if(n%2==1){
//             return (double)arr3[n/2];
//         }else{
//             return ((double)arr3[n/2]+(double)arr3[(n/2)-1])/2.0;
//         }
//     }
// }

class Solution {
    public double findMedianSortedArrays(int[] a, int[] b) {
        int n1=a.length;
        int n2 = b.length;
        if(n1>n2) return findMedianSortedArrays(b,a);
        int low=0, high=n1;
        int left=(n1+n2+1)/2;
        int n=n1+n2;
        while(low<=high){
            int mid1=(low+high)/2;
            int mid2=left-mid1;
            int l1=Integer.MIN_VALUE, l2=Integer.MIN_VALUE;
            int r1=Integer.MAX_VALUE, r2=Integer.MAX_VALUE;
            if(mid1<n1) r1=a[mid1];
            if(mid2<n2) r2=b[mid2];
            if(mid1-1>=0) l1=a[mid1-1];
            if(mid2-1>=0) l2=b[mid2-1];
            if(l1<=r2 && l2<=r1){
                if(n%2==1) return Math.max(l1,l2);
                return ((double)(Math.max(l1,l2)+Math.min(r1,r2)))/2.0;
            }
            else if(l1>r2) high=mid1-1;
            else low=mid1+1;
        }
        return 0;
    }
}
