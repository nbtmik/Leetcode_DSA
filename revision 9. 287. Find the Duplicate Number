// class Solution {
//     public void merge(int[] nums1, int m, int[] nums2, int n) {
//         for(int j=0,i=m;j<n;j++){
//             nums1[i]=nums2[j];
//             i++;
//         }
//         Arrays.sort(nums1);
//     }
// }

// class Solution {
//     public void merge(int[] nums1, int m, int[] nums2, int n) {
//         int[] arr3 = new int[n+m];
//         int left=0,right =0,index=0;
//         while(left<m && right<n){
//             if(nums1[left]<=nums2[right]){
//                 arr3[index] = nums1[left];
//                 left++;
//                 index++;
//             }else{
//                 arr3[index] = nums2[right];
//                 right++;
//                 index++;
//             }
//         }
//         while(left<m){
//             arr3[index]= nums1[left];
//             index++;
//             left++;
//         }
//         while(right<n){
//             arr3[index]=nums2[right];
//             index++;
//             right++;
//         }
//         for(int i=0;i<n+m;i++){
//             if(i<m){
//                 nums1[i] = arr3[i];
//             } else{
//                 nums2[i-m] = arr3[i];
//             }
//         }
//     }    
// }

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int left=m-1;
        int right =0;
        while(left>=0 && right <n){
            if(nums1[left]> nums2[right]){
                int temp = nums1[left];
                nums1[left] = nums2[right];
                nums2[right] = temp;
                left--;
                right++;
            }else{
                break;
            }
        }
        Arrays.sort(nums1);
        Arrays.sort(nums2);
    }
}

