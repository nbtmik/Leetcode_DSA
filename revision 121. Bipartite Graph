// class Solution
// {
//     private boolean check(int start,int V,ArrayList<ArrayList<Integer>> adj,int color[]){
//         Queue<Integer> q=new LinkedList<Integer>();
//         q.add(start);
//         color[start]=0;
//         while(!q.isEmpty()){
//             int node=q.peek();
//             q.remove();
//             for(int it:adj.get(node)){
//                 if(color[it]==-1){
//                 color[it]= 1-color[node]; //not equal
//                 q.add(it);
//                 }
//                 else if(color[it]==color[node]){
//                 return false;
//             }
//         }
//     }
//     return true;
// }
//     public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
//     {
//         int color[] = new int[V];
//         for(int i=0;i<V;i++) color[i]=-1;
//         for(int i=0;i<V;i++){
//             if(color[i]==-1 && !check(i,V,adj,color)){
//                 return false;
//             }
//         }
//         return true;
//     }
// }


class Solution
{
    private boolean dfs(int node,int col,int color[],ArrayList<ArrayList<Integer>> adj){
        color[node]=col;
        for(int it:adj.get(node)){
            if(color[it]==-1){
                if(dfs(it,1-col,color,adj)==false) return false;
            }else if(color[it]==col){
                return false;
            }
        }
        return true;
    }
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int color[]= new int[V];
        for(int i=0;i<V;i++){
            color[i]=-1;
        }
        for(int i=0;i<V;i++){
            if(color[i]==-1){
                if(dfs(i,0,color,adj)==false) return false;
            }
        }
        return true;
    }
}
