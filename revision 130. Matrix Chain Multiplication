//User function Template for Java

// class Solution{
//     static int f(int i, int j,int arr[]){
//         if(i==j) return 0;
//         int mini = Integer.MAX_VALUE;
//         for(int k=i;k<=j-1;k++){
//             int path = arr[i-1]*arr[k]*arr[j]+f(i,k,arr)+f(k+1,j,arr);
//             mini = Math.min(mini,path);
//         }
//         return mini;
//     } 
//     static int matrixMultiplication(int N, int arr[])
//     {
//         int i=1;
//         int j=N-1;
//         return f(i,j,arr);
//     }
// }

// class Solution{
//     static int f(int i, int j,int arr[], int dp[][]){
//         if(i==j) return 0;
//         if(dp[i][j]!=-1) return 0;
//         int mini = Integer.MAX_VALUE;
//         for(int k=i;k<=j-1;k++){
//             int path = arr[i-1]*arr[k]*arr[j]+f(i,k,arr,dp)+f(k+1,j,arr,dp);
//             mini = Math.min(mini,path);
//         }
//         return mini;
//     } 
//     static int matrixMultiplication(int N, int arr[])
//     {
//         int dp[][] = new int[N][N];
//         for(int row[]:dp){
//             Arrays.fill(row,-1);
//         }
//         int i=1;
//         int j=N-1;
//         return f(i,j,arr,dp);
//     }
// }

class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        int dp[][] = new int[N][N];
        for(int row[]:dp){
            Arrays.fill(row,-1);
        }
        for(int i=1;i<N;i++) dp[i][i]=0;
        
        for(int i=N-1;i>=1;i--){
            for(int j=i+1;j<N;j++){
                int mini = Integer.MAX_VALUE;
                for(int k=i;k<=j-1;k++){
                    int path = arr[i-1]*arr[k]*arr[j] + dp[i][k] + dp[k+1][j];
                    mini= Math.min(mini,path);
                }
                dp[i][j]=mini;
            }
        }
        return dp[1][N-1];
    }
}
