class Pair<T1, T2> {
    private T1 key;
    private T2 value;

    public Pair(T1 key, T2 value) {
        this.key = key;
        this.value = value;
    }

    public T1 getKey() {
        return key;
    }

    public T2 getValue() {
        return value;
    }
}

class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root) {
        ArrayList<Integer> ans = new ArrayList<>();
        
        if(root==null){
            return ans;
        }
        Map<Integer,Integer> mpp = new TreeMap<>();
        Queue<Pair<Node,Integer>> q= new LinkedList<>();
        q.add(new Pair<>(root,0));
        while(!q.isEmpty()){
            Pair<Node,Integer> pair= q.poll();
            Node node = pair.getKey();
            int line = pair.getValue();
            
            if(!mpp.containsKey(line)){
                mpp.put(line,node.data);
            }
            if(node.left!=null){
                q.add(new Pair<>(node.left,line-1));
            }
            if(node.right!=null){
                q.add(new Pair<>(node.right,line+1));
            }
        }
        for(int value:mpp.values()){
            ans.add(value);
        }
        return ans;
    }
}
