import java.util.*;
import java.util.ArrayList;
import java.util.List;

// Define the Pair class
class Pair<T1, T2> {
    private T1 key;
    private T2 value;

    public Pair(T1 key, T2 value) {
        this.key = key;
        this.value = value;
    }

    public T1 getKey() {
        return key;
    }

    public void setKey(T1 key) {
        this.key = key;
    }

    public T2 getValue() {
        return value;
    }

    public void setValue(T2 value) {
        this.value = value;
    }
}

public class Solution {
    public static List<List<Integer>> getTreeTraversal(TreeNode root) {
        List<Integer> pre = new ArrayList<>();
        List<Integer> in = new ArrayList<>();
        List<Integer> post = new ArrayList<>();

        if (root == null) {
            return new ArrayList<>();
        }

        Stack<Pair<TreeNode, Integer>> st = new Stack<>();
        st.push(new Pair<>(root, 1));

        while (!st.isEmpty()) {
            Pair<TreeNode, Integer> it = st.pop();

            if (it.getValue() == 1) {
                pre.add(it.getKey().data);
                it.setValue(2);
                st.push(it);

                if (it.getKey().left != null) {
                    st.push(new Pair<>(it.getKey().left, 1));
                }
            } else if (it.getValue() == 2) {
                in.add(it.getKey().data);
                it.setValue(3);
                st.push(it);

                if (it.getKey().right != null) {
                    st.push(new Pair<>(it.getKey().right, 1));
                }
            } else {
                post.add(it.getKey().data);
            }
        }

        List<List<Integer>> result = new ArrayList<>();
        result.add(in);
        result.add(pre);
        result.add(post);

        return result;
    }
}
